# -*- coding: utf-8 -*-
"""BERT grammar checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yCMSo0kojsHnhb3mP9TjBCwY2P-bMF_K
"""

pip install dataset

pip install happytransformer

import csv
from datasets import load_dataset
from happytransformer import HappyTextToText, TTTrainArgs, TTSettings

happy_tt = HappyTextToText("bert-base-uncased")

from datasets import load_dataset

train_dataset = load_dataset("jfleg", split='validation[:]')
eval_dataset = load_dataset("jfleg", split='test[:]')

# Define a function to generate CSV files
def generate_csv(csv_path, dataset):
    with open(csv_path, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["input", "target"])
        for case in dataset:
            # Adding the task's prefix to input
            input_text = "grammar: " + case["sentence"]
            for correction in case["corrections"]:
                # Check for empty strings
                if input_text.strip() and correction.strip():
                    writer.writerow([input_text, correction])

# Generate CSV files for training and evaluation
generate_csv("train.csv", train_dataset)
generate_csv("eval.csv", eval_dataset)

# Evaluate the model before fine-tuning
before_result = happy_tt.eval("eval.csv")
print("Before loss:", before_result.loss)

# Define training arguments
args = TTTrainArgs(batch_size=8)

happy_tt.train("train.csv", args=args)

# Evaluate the model after fine-tuning
after_result = happy_tt.eval("eval.csv")
print("After loss:", after_result.loss)

# Define beam search settings for text generation
beam_settings = TTSettings(num_beams=5, min_length=1, max_length=20)

"""1)Incorrect: "He don't like pizza."

Corrected: "He doesn't like pizza."


2)Incorrect: "She have two cats."

Corrected: "She has two cats."


3)Incorrect: "I can plays the guitar."

Corrected: "I can play the guitar."


4)Incorrect: "They was at the party last night."

Corrected: "They were at the party last night."


5)Incorrect: "She writed a beautiful poem."

Corrected: "She wrote a beautiful poem."


6)Incorrect: "The cat is laying on the couch."

Corrected: "The cat is lying on the couch."


7)Incorrect: "He have been to spain before."

Corrected: "He has been to spain before."


8)Incorrect: "The book is laying on the table."

Corrected: "The book is lying on the table."


9)Incorrect: "She don't have any siblings."

Corrected: "She doesn't have any siblings."


10)Incorrect: "We can goes to the park tomorrow."

Corrected: "We can go to the park tomorrow."
"""

# Examples for text generation
example_1 = "He don't like pizza."
result_1 = happy_tt.generate_text(example_1, args=beam_settings)
print("Example 1:", result_1.text)

example_2 = "She have two cats."
result_2 = happy_tt.generate_text(example_2, args=beam_settings)
print("Example 2:", result_2.text)

example_3 = "I can plays the guitar."
result_3 = happy_tt.generate_text(example_3, args=beam_settings)
print("Example 3:", result_3.text)

example_4 = "They was at the party last night."
result_4 = happy_tt.generate_text(example_4, args=beam_settings)
print("Example 4:", result_4.text)

example_5 = "She writed a beautiful poem."
result_5 = happy_tt.generate_text(example_5, args=beam_settings)
print("Example 5:", result_5.text)

example_6 = "The cat is laying on the couch."
result_6 = happy_tt.generate_text(example_6, args=beam_settings)
print("Example 6:", result_6.text)

example_7 = "He have been to Spain before."
result_7 = happy_tt.generate_text(example_7, args=beam_settings)
print("Example 7:", result_7.text)

# example_7 = "He have been to Paris before."
# result_7 = happy_tt.generate_text(example_7, args=beam_settings)
# print("Example 7:", result_7.text)

example_8 = "The book is laying on the table."
result_8 = happy_tt.generate_text(example_8, args=beam_settings)
print("Example 8:", result_8.text)

example_9 = "She don't have any siblings."
result_9 = happy_tt.generate_text(example_9, args=beam_settings)
print("Example 9:", result_9.text)

example_10 = "We can goes to the park tomorrow."
result_10 = happy_tt.generate_text(example_10, args=beam_settings)
print("Example 10:", result_10.text)

